public class TriggerHandlerBeforeInsert {
    
    private final Integer START_STRING_POSITION = 0;
    private final Integer EXTRA_SYMBOLS = 3;
    private final Integer DEFAULT_PERIOD_TERM = 10;

    private Map<Product_Table__c, Warehouse__c> productTableMapWithWarehouse = new Map<Product_Table__c, Warehouse__c>();
    private List<Warehouse__c> warehouseListForInsert = new List<Warehouse__c>();

    public void bindProductTableToWarehouse(List<Product_Table__c> productTableList) {
        List<Warehouse__c> warehouseList = new List<Warehouse__c>();
        String warehouseQuery = getWarehouseQueryString(productTableList);
        try {
        	warehouseList = Database.query(warehouseQuery);
        } catch(Exception ex) {
            System.debug('Error retrieving records Warehouses. ' + ex);
        }

        for (Product_Table__c productTable : productTableList) {
            for (Warehouse__c warehouse : warehouseList) {
                if (warehouse.Period_Start__c <= productTable.Added_Date__c && warehouse.Period_End__c >= productTable.Added_Date__c) {
                    if (productTable.Warehouse__c == null) {
                    	productTable.Warehouse__c = warehouse.Id;
                    }
                    break;
                }
            }
            if (productTable.Warehouse__c == null) {
                initWarehoeseList(productTable);
            }
        }

        if (warehouseListForInsert.size() != 0) {
            try {
            	insert warehouseListForInsert;
            } catch(Exception ex) {
                System.debug('Error when inserting records Warehouses. ' + ex);
            }
            for(Product_Table__c productTable : productTableMapWithWarehouse.keySet()) {
                productTable.Warehouse__c = productTableMapWithWarehouse.get(productTable).Id;
            }
        }
    }
    
    private String getWarehouseQueryString(List<Product_Table__c> productTableList) {
        String warehouseQuery = 'SELECT Id, Period_Start__c, Period_End__c FROM Warehouse__c WHERE';
        for (Product_Table__c productTable : productTableList) {
            productTable.Added_Date__c = productTable.Added_Date__c == null ? Date.today() : productTable.Added_Date__c;
            String addedDateForQuery = DateTime.newInstance(productTable.Added_Date__c, Time.newInstance(0, 0, 0, 0)).format('YYYY-MM-dd');
            warehouseQuery += ' (Period_Start__c <= ' + addedDateForQuery + ' AND Period_End__c >= ' + addedDateForQuery + ') OR';
        }
        // Deleting the last ' OR'
        warehouseQuery = warehouseQuery.substring(START_STRING_POSITION, warehouseQuery.length() - EXTRA_SYMBOLS);
        return warehouseQuery;
    }
    
    private void initWarehoeseList(Product_Table__c productTable) {
        Warehouse__c newWarehouse = new Warehouse__c();
        Org_Configuration__c orgConfig = Org_Configuration__c.getInstance(UserInfo.getUserId());
        Integer periodTerm = orgConfig.get('Period_Term__c') == null ? DEFAULT_PERIOD_TERM : Integer.valueOf(orgConfig.get('Period_Term__c'));

        newWarehouse.Name = 'Warehouse' + productTable.Added_Date__c + ' ' + (productTable.Added_Date__c + periodTerm);
        newWarehouse.Period_Start__c = productTable.Added_Date__c;
        newWarehouse.Period_End__c = productTable.Added_Date__c + periodTerm;

        productTableMapWithWarehouse.put(productTable, newWarehouse);
        warehouseListForInsert.add(newWarehouse);
    }
}